### DELETE /api/language/ (drop)
DELETE {{gateway}}/api/language/
Content-Type: application/json
Authorization: Bearer {{token}}

> {%
    client.test("DELETE /api/language/{id} executed with status 200", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### DELETE /api/user/ (drop)
DELETE {{gateway}}/api/language/
Content-Type: application/json
Authorization: Bearer {{token}}

> {%
    client.test("DELETE /api/language/{id} executed with status 200", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### GET /api/user
GET {{gateway}}/api/user

> {%
    client.test("GET /api/user executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is application/json", function() {
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", `Expected 'application/json' but received '${type}'`);
    });
%}

### POST /api/user
POST {{gateway}}/api/user
Content-Type: application/json

{
  "username": "johndoe",
  "password": "test1234"
}

> {%
    client.test("POST /api/user executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response body contains token and expiresAt", function() {
        const body = response.body;
        client.assert(body.hasOwnProperty("token") && body.hasOwnProperty("expiresAt"), "Response body does not contain 'token' or 'expiresAt'");
    });
%}

### POST /api/user/login (valid password)
POST {{gateway}}/api/user/login
Content-Type: application/json

{
  "username": "johndoe",
  "password": "test1234"
}

> {%
    client.test("POST /api/user/login executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response body contains token", function() {
        const body = response.body;

        if (body.hasOwnProperty('token')) {
            client.global.set('token', body.token);
        }

        client.assert(body.hasOwnProperty("token"), "Response body does not contain 'token'");
    });
%}

### POST /api/user/login (invalid password)
POST {{gateway}}/api/user/login
Content-Type: application/json

{
  "username": "johndoe",
  "password": "test12345"
}

> {%
    client.test("POST /api/user/login executed with status 403", function() {
        client.assert(response.status === 403, "Response status is not 403");
    });

    client.test("Response body contains an error message", function() {
        const body = response.body;
        client.assert(!!body.message && body.message === 'Bad password', "Response body does not contain valid error message");
    });
%}

### GET /api/user/me (authorized)
GET {{gateway}}/api/user/me
Content-Type: application/json
Authorization: Bearer {{token}}

> {%
    client.test("GET /api/user/me executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response body contains the user data", function() {
        const body = response.body;
        const responseIsValid = !!body.username && !!body.id && !!body.languages;
        
        if (responseIsValid) {
            client.global.set('userId', body.id);
            client.global.set('username', body.username);
        }
        
        client.assert(responseIsValid, "Response body does not contain valid error message");
    });
%}

### PUT /api/user/{id} (unauthorized)
PUT {{gateway}}/api/user/1
Content-Type: application/json

{
  "password": "newpassword"
}

> {%
    client.test("PUT /api/user/{id} responded with status 403", function() {
        client.assert(response.status === 403, "Response status is not 403");
    });

    client.test("Response body contains error message", function() {
        const body = response.body;
        client.assert(body.message === "Unauthorized", `Expected 'Unauthorized', but got '${body.message}'`);
    });
%}

### PUT /api/user/{id} (authorized)
< {% 
  request.variables.set('userId', client.global.get('userId'))
 %}
PUT {{gateway}}/api/user/{{userId}}
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "password": "newpassword"
}

> {%
    client.test("PUT /api/user/{id} executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response body contains success message", function() {
        const body = response.body;
        const responseIsValid = !!body.username && !!body.id && !!body.languages;

        client.assert(responseIsValid, "Response body does not contain the updated user's data");
    });
%}


### GET /api/language (all languages)
GET {{gateway}}/api/language
Content-Type: application/json

> {%
    client.test("GET /api/language executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response body contains an array of languages", function() {
        const body = response.body;
        client.assert(Array.isArray(body), "Response body is not an array");
    });
%}

### POST /api/language (create language)
POST {{gateway}}/api/language
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "French",
  "description": "French language",
  "lengthOfCourse": 1,
  "userId": {{userId}}
}

> {%
    client.test("POST /api/language executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response body contains the created language data", function() {
        const body = response.body;
        
        const responseIsValid = !!body.id &&
            body.name === "French" &&
            body.description === "French language" &&
            body.lenghtOfCourse === 1 &&
            body.userId === Number(client.global.get("userId")) &&
            body.status === null;

        if (responseIsValid) {
            client.global.set('languageId', body.id);
        }

        client.assert(responseIsValid, "Response body does not contain the created language data");
    });
%}

### POST /api/language (language already exists)
POST {{gateway}}/api/language
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "French",
  "description": "French language",
  "lengthOfCourse": 1,
  "userId": {{userId}}
}

> {%
    client.test("POST /api/language executed with status 400", function() {
        client.assert(response.status === 400, "Response status is not 400");
    });

    client.test("Response body contains the error message", function() {
        const body = response.body;

        client.assert(!!body.message && body.message === 'Such language already exists', "Response body does not contain the valid error message");
    });
%}

### GET /api/language/{id} (get language by ID)
GET {{gateway}}/api/language/{{languageId}}
Content-Type: application/json
Authorization: Bearer {{token}}

> {%
    client.test("GET /api/language/{id} executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response body contains the correct language data", function() {
        const body = response.body;
        client.assert(body.id === Number(client.global.get('languageId')), "Response body does not match the requested language ID");
    });
%}

### GET /api/language/{id} (language not found)
GET {{gateway}}/api/language/{{$random.integer(99999, 999999)}}
Content-Type: application/json
Authorization: Bearer {{token}}

> {%
    client.test("GET /api/language/{id} executed with status 404", function() {
        client.assert(response.status === 404, "Response status is not 404");
    });

    client.test("Response body contains the correct error message", function() {
        const body = response.body;

        client.assert(!!body.message && body.message === 'Language not found', "Response body does not contain the valid error message");
    });
%}

### PUT /api/language/{id} (update language)
PUT {{gateway}}/api/language/{{languageId}}
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "French2",
  "description": "French2 language",
  "lengthOfCourse": 2
}

> {%
    client.test("PUT /api/language/{id} executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response body contains the updated language data", function() {
        const body = response.body;
        
        const responseIsValid = !!body.id &&
            body.name === "French2" &&
            body.description === "French2 language" &&
            body.lenghtOfCourse === 2 &&
            body.userId === Number(client.global.get("userId")) &&
            !!body.status;

        client.assert(responseIsValid, "Response body does not contain the updated language data");
    });
%}

### PUT /api/language/{id} (language not found)
PUT {{gateway}}/api/language/{{$random.integer(99999, 999999)}}
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "name": "French2",
  "description": "French2 language",
  "lengthOfCourse": 2
}

> {%
    client.test("PUT /api/language/{id} executed with status 404", function() {
        client.assert(response.status === 404, "Response status is not 404");
    });

    client.test("Response body contains the correct error message", function() {
        const body = response.body;

        client.assert(!!body.message && body.message === 'Language not found', "Response body does not contain the valid error message");
    });
%}

### DELETE /api/language/{id} (delete language)
DELETE {{gateway}}/api/language/{{languageId}}
Content-Type: application/json
Authorization: Bearer {{token}}

> {%
    client.test("DELETE /api/language/{id} executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Language was successfully deleted", function() {
        client.assert(!!response.body, "Response body is valid");
    });
%}

### DELETE /api/language/{id} (language not found)
DELETE {{gateway}}/api/language/{{$random.integer(99999, 999999)}}
Content-Type: application/json
Authorization: Bearer {{token}}

> {%
    client.test("DELETE /api/language/{id} executed with status 404", function() {
        client.assert(response.status === 404, "Response status is not 404");
    });

    client.test("Response body contains the correct error message", function() {
        const body = response.body;

        client.assert(!!body.message && body.message === 'Language not found', "Response body does not contain the valid error message");
    });
%}
